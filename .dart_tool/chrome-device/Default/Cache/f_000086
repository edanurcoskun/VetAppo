define(['dart_sdk', 'packages/collection/src/equality.dart', 'packages/cloud_firestore/src/utils/push_id_generator.dart', 'packages/firebase_core/src/firebase_app.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/serialization.dart'], (function load__packages__cloud_firestore__cloud_firestore_dart(dart_sdk, packages__collection__src__equality$46dart, packages__cloud_firestore__src__utils__push_id_generator$46dart, packages__firebase_core__src__firebase_app$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation__serialization$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const typed_data = dart_sdk.typed_data;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const push_id_generator = packages__cloud_firestore__src__utils__push_id_generator$46dart.src__utils__push_id_generator;
  const firebase_app = packages__firebase_core__src__firebase_app$46dart.src__firebase_app;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const serialization = packages__flutter__src__foundation__serialization$46dart.src__foundation__serialization;
  var cloud_firestore = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $isEmpty = dartx.isEmpty;
  var $last = dartx.last;
  var $removeLast = dartx.removeLast;
  var $add = dartx.add;
  var $split = dartx.split;
  var $addAll = dartx.addAll;
  var $join = dartx.join;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $_get = dartx._get;
  var $where = dartx.where;
  var $containsKey = dartx.containsKey;
  var $toString = dartx.toString;
  var $firstWhere = dartx.firstWhere;
  var $cast = dartx.cast;
  var $length = dartx.length;
  var $floor = dartx.floor;
  var $compareTo = dartx.compareTo;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    BlobL: () => (T.BlobL = dart.constFn(dart.legacy(cloud_firestore.Blob)))(),
    DefaultEqualityOfNeverL: () => (T.DefaultEqualityOfNeverL = dart.constFn(equality.DefaultEquality$(dart.legacy(dart.Never))))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    ListOfStringL: () => (T.ListOfStringL = dart.constFn(core.List$(T.StringL())))(),
    DocumentReferenceL: () => (T.DocumentReferenceL = dart.constFn(dart.legacy(cloud_firestore.DocumentReference)))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    ListOfListL: () => (T.ListOfListL = dart.constFn(core.List$(T.ListL())))(),
    JSArrayOfListL: () => (T.JSArrayOfListL = dart.constFn(_interceptors.JSArray$(T.ListL())))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    LinkedHashMapOfStringL$dynamic: () => (T.LinkedHashMapOfStringL$dynamic = dart.constFn(collection.LinkedHashMap$(T.StringL(), dart.dynamic)))(),
    QuerySnapshotL: () => (T.QuerySnapshotL = dart.constFn(dart.legacy(cloud_firestore.QuerySnapshot)))(),
    StreamControllerOfQuerySnapshotL: () => (T.StreamControllerOfQuerySnapshotL = dart.constFn(async.StreamController$(T.QuerySnapshotL())))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    FutureOrOfintL: () => (T.FutureOrOfintL = dart.constFn(async.FutureOr$(T.intL())))(),
    FutureOrLOfintL: () => (T.FutureOrLOfintL = dart.constFn(dart.legacy(T.FutureOrOfintL())))(),
    dynamicToFutureOrLOfintL: () => (T.dynamicToFutureOrLOfintL = dart.constFn(dart.fnType(T.FutureOrLOfintL(), [dart.dynamic])))(),
    intLToNull: () => (T.intLToNull = dart.constFn(dart.fnType(core.Null, [T.intL()])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureLOfNull: () => (T.FutureLOfNull = dart.constFn(dart.legacy(T.FutureOfNull())))(),
    intLToFutureLOfNull: () => (T.intLToFutureLOfNull = dart.constFn(dart.fnType(T.FutureLOfNull(), [T.intL()])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    ListLToboolL: () => (T.ListLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ListL()])))(),
    StringLAndStringLAnddynamicTovoid: () => (T.StringLAndStringLAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [T.StringL(), T.StringL(), dart.dynamic])))(),
    DocumentChangeTypeL: () => (T.DocumentChangeTypeL = dart.constFn(dart.legacy(cloud_firestore.DocumentChangeType)))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    DocumentChangeTypeLToboolL: () => (T.DocumentChangeTypeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.DocumentChangeTypeL()])))(),
    IdentityMapOfStringL$boolL: () => (T.IdentityMapOfStringL$boolL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.boolL())))(),
    DocumentSnapshotL: () => (T.DocumentSnapshotL = dart.constFn(dart.legacy(cloud_firestore.DocumentSnapshot)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    StreamControllerOfDocumentSnapshotL: () => (T.StreamControllerOfDocumentSnapshotL = dart.constFn(async.StreamController$(T.DocumentSnapshotL())))(),
    FieldValueTypeL: () => (T.FieldValueTypeL = dart.constFn(dart.legacy(cloud_firestore.FieldValueType)))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    FutureL: () => (T.FutureL = dart.constFn(dart.legacy(async.Future)))(),
    MethodCallL: () => (T.MethodCallL = dart.constFn(dart.legacy(message_codec.MethodCall)))(),
    MethodCallLToFutureL: () => (T.MethodCallLToFutureL = dart.constFn(dart.fnType(T.FutureL(), [T.MethodCallL()])))(),
    FirestoreL: () => (T.FirestoreL = dart.constFn(dart.legacy(cloud_firestore.Firestore)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    StreamControllerLOfQuerySnapshotL: () => (T.StreamControllerLOfQuerySnapshotL = dart.constFn(dart.legacy(T.StreamControllerOfQuerySnapshotL())))(),
    IdentityMapOfintL$StreamControllerLOfQuerySnapshotL: () => (T.IdentityMapOfintL$StreamControllerLOfQuerySnapshotL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.StreamControllerLOfQuerySnapshotL())))(),
    StreamControllerLOfDocumentSnapshotL: () => (T.StreamControllerLOfDocumentSnapshotL = dart.constFn(dart.legacy(T.StreamControllerOfDocumentSnapshotL())))(),
    IdentityMapOfintL$StreamControllerLOfDocumentSnapshotL: () => (T.IdentityMapOfintL$StreamControllerLOfDocumentSnapshotL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.StreamControllerLOfDocumentSnapshotL())))(),
    TransactionL: () => (T.TransactionL = dart.constFn(dart.legacy(cloud_firestore.Transaction)))(),
    TransactionLToFutureL: () => (T.TransactionLToFutureL = dart.constFn(dart.fnType(T.FutureL(), [T.TransactionL()])))(),
    TransactionLToLFutureL: () => (T.TransactionLToLFutureL = dart.constFn(dart.legacy(T.TransactionLToFutureL())))(),
    IdentityMapOfintL$TransactionLToLFutureL: () => (T.IdentityMapOfintL$TransactionLToLFutureL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.TransactionLToLFutureL())))(),
    DateTimeL: () => (T.DateTimeL = dart.constFn(dart.legacy(core.DateTime)))(),
    TimestampL: () => (T.TimestampL = dart.constFn(dart.legacy(cloud_firestore.Timestamp)))(),
    GeoPointL: () => (T.GeoPointL = dart.constFn(dart.legacy(cloud_firestore.GeoPoint)))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    FieldValueL: () => (T.FieldValueL = dart.constFn(dart.legacy(cloud_firestore.FieldValue)))(),
    ListOfDocumentSnapshotL: () => (T.ListOfDocumentSnapshotL = dart.constFn(core.List$(T.DocumentSnapshotL())))(),
    intLToDocumentSnapshotL: () => (T.intLToDocumentSnapshotL = dart.constFn(dart.fnType(T.DocumentSnapshotL(), [T.intL()])))(),
    DocumentChangeL: () => (T.DocumentChangeL = dart.constFn(dart.legacy(cloud_firestore.DocumentChange)))(),
    ListOfDocumentChangeL: () => (T.ListOfDocumentChangeL = dart.constFn(core.List$(T.DocumentChangeL())))(),
    intLToDocumentChangeL: () => (T.intLToDocumentChangeL = dart.constFn(dart.fnType(T.DocumentChangeL(), [T.intL()])))(),
    JSArrayOfFutureL: () => (T.JSArrayOfFutureL = dart.constFn(_interceptors.JSArray$(T.FutureL())))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: T.DefaultEqualityOfNeverL().prototype
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [DeepCollectionEquality__unordered]: false,
        [DeepCollectionEquality__base]: C[1] || CT.C1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: equality.ListEquality.prototype,
        [ListEquality__elementEquality]: C[1] || CT.C1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: cloud_firestore.DocumentChangeType.prototype,
        [_name$]: "DocumentChangeType.added",
        index: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: cloud_firestore.DocumentChangeType.prototype,
        [_name$]: "DocumentChangeType.modified",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: cloud_firestore.DocumentChangeType.prototype,
        [_name$]: "DocumentChangeType.removed",
        index: 2
      });
    },
    get C6() {
      return C[6] = dart.constList([C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5], T.DocumentChangeTypeL());
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: cloud_firestore.FieldValueType.prototype,
        [_name$]: "FieldValueType.arrayUnion",
        index: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: cloud_firestore.FieldValueType.prototype,
        [_name$]: "FieldValueType.arrayRemove",
        index: 1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: cloud_firestore.FieldValueType.prototype,
        [_name$]: "FieldValueType.delete",
        index: 2
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: cloud_firestore.FieldValueType.prototype,
        [_name$]: "FieldValueType.serverTimestamp",
        index: 3
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: cloud_firestore.FieldValueType.prototype,
        [_name$]: "FieldValueType.incrementDouble",
        index: 4
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: cloud_firestore.FieldValueType.prototype,
        [_name$]: "FieldValueType.incrementInteger",
        index: 5
      });
    },
    get C13() {
      return C[13] = dart.constList([C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12], T.FieldValueTypeL());
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 5000000
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: cloud_firestore.FirestoreMessageCodec.prototype
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[17] || CT.C17
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[16] || CT.C16,
        [MethodChannel_name]: "plugins.flutter.io/cloud_firestore"
      });
    },
    get C18() {
      return C[18] = dart.constMap(T.FieldValueTypeL(), T.intL(), [C[7] || CT.C7, 132, C[8] || CT.C8, 133, C[9] || CT.C9, 134, C[10] || CT.C10, 135, C[11] || CT.C11, 137, C[12] || CT.C12, 138]);
    }
  }, false);
  var C = Array(19).fill(void 0);
  var I = [
    "package:cloud_firestore/cloud_firestore.dart",
    "file:///D:/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.11.0+2/lib/src/query.dart",
    "file:///D:/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.11.0+2/lib/src/document_reference.dart",
    "file:///D:/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.11.0+2/lib/src/field_value.dart",
    "file:///D:/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.11.0+2/lib/src/firestore.dart",
    "file:///D:/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-0.11.0+2/lib/src/firestore_message_codec.dart"
  ];
  var bytes$ = dart.privateName(cloud_firestore, "Blob.bytes");
  var DeepCollectionEquality__unordered = dart.privateName(equality, "DeepCollectionEquality._unordered");
  var DeepCollectionEquality__base = dart.privateName(equality, "DeepCollectionEquality._base");
  cloud_firestore.Blob = class Blob extends core.Object {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    _equals(other) {
      if (other == null) return false;
      return T.BlobL().is(other) && dart.test((C[0] || CT.C0).equals(other.bytes, this.bytes));
    }
    get hashCode() {
      return ui.hashList(this.bytes);
    }
  };
  (cloud_firestore.Blob.new = function(bytes) {
    this[bytes$] = bytes;
    ;
  }).prototype = cloud_firestore.Blob.prototype;
  dart.addTypeTests(cloud_firestore.Blob);
  dart.addTypeCaches(cloud_firestore.Blob);
  dart.setMethodSignature(cloud_firestore.Blob, () => ({
    __proto__: dart.getMethods(cloud_firestore.Blob.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(cloud_firestore.Blob, () => ({
    __proto__: dart.getGetters(cloud_firestore.Blob.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(cloud_firestore.Blob, I[0]);
  dart.setFieldSignature(cloud_firestore.Blob, () => ({
    __proto__: dart.getFields(cloud_firestore.Blob.__proto__),
    bytes: dart.finalFieldType(dart.legacy(typed_data.Uint8List))
  }));
  dart.defineExtensionMethods(cloud_firestore.Blob, ['_equals']);
  dart.defineExtensionAccessors(cloud_firestore.Blob, ['hashCode']);
  var _pathComponents = dart.privateName(cloud_firestore, "_pathComponents");
  var _path$ = dart.privateName(cloud_firestore, "_path");
  var firestore$ = dart.privateName(cloud_firestore, "Query.firestore");
  var _parameters = dart.privateName(cloud_firestore, "_parameters");
  var _copyWithParameters = dart.privateName(cloud_firestore, "_copyWithParameters");
  var ListEquality__elementEquality = dart.privateName(equality, "ListEquality._elementEquality");
  cloud_firestore.Query = class Query extends core.Object {
    get firestore() {
      return this[firestore$];
    }
    set firestore(value) {
      super.firestore = value;
    }
    get [_path$]() {
      return this[_pathComponents][$join]("/");
    }
    [_copyWithParameters](parameters) {
      let t0;
      return new cloud_firestore.Query.__({firestore: this.firestore, pathComponents: this[_pathComponents], parameters: T.MapOfStringL$dynamic().unmodifiable((t0 = T.LinkedHashMapOfStringL$dynamic().from(this[_parameters]), (() => {
          t0[$addAll](parameters);
          return t0;
        })()))});
    }
    buildArguments() {
      let t0;
      t0 = T.LinkedHashMapOfStringL$dynamic().from(this[_parameters]);
      return (() => {
        t0[$addAll](new (T.IdentityMapOfStringL$dynamic()).from(["path", this[_path$]]));
        return t0;
      })();
    }
    snapshots() {
      let _handle = null;
      let controller = null;
      controller = T.StreamControllerOfQuerySnapshotL().broadcast({onListen: dart.fn(() => {
          _handle = cloud_firestore.Firestore.channel.invokeMethod(T.intL(), "Query#addSnapshotListener", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.firestore.app.name, "path", this[_path$], "parameters", this[_parameters]])).then(T.intL(), dart.fn(result => T.FutureOrLOfintL().as(result), T.dynamicToFutureOrLOfintL()));
          _handle.then(core.Null, dart.fn(handle => {
            cloud_firestore.Firestore._queryObservers[$_set](handle, controller);
          }, T.intLToNull()));
        }, T.VoidToNull()), onCancel: dart.fn(() => {
          _handle.then(core.Null, dart.fn(handle => async.async(core.Null, function*() {
            yield cloud_firestore.Firestore.channel.invokeMethod(dart.void, "Query#removeListener", new (T.IdentityMapOfStringL$dynamic()).from(["handle", handle]));
            cloud_firestore.Firestore._queryObservers[$remove](handle);
          }), T.intLToFutureLOfNull()));
        }, T.VoidToNull())});
      return controller.stream;
    }
    getDocuments() {
      return async.async(T.QuerySnapshotL(), (function* getDocuments() {
        let data = (yield cloud_firestore.Firestore.channel.invokeMapMethod(T.StringL(), dart.dynamic, "Query#getDocuments", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.firestore.app.name, "path", this[_path$], "parameters", this[_parameters]])));
        return new cloud_firestore.QuerySnapshot.__(data, this.firestore);
      }).bind(this));
    }
    reference() {
      return new cloud_firestore.CollectionReference.__(this.firestore, this[_pathComponents]);
    }
    where(field, opts) {
      let isEqualTo = opts && 'isEqualTo' in opts ? opts.isEqualTo : null;
      let isLessThan = opts && 'isLessThan' in opts ? opts.isLessThan : null;
      let isLessThanOrEqualTo = opts && 'isLessThanOrEqualTo' in opts ? opts.isLessThanOrEqualTo : null;
      let isGreaterThan = opts && 'isGreaterThan' in opts ? opts.isGreaterThan : null;
      let isGreaterThanOrEqualTo = opts && 'isGreaterThanOrEqualTo' in opts ? opts.isGreaterThanOrEqualTo : null;
      let arrayContains = opts && 'arrayContains' in opts ? opts.arrayContains : null;
      let isNull = opts && 'isNull' in opts ? opts.isNull : null;
      let equality = C[2] || CT.C2;
      let conditions = T.ListOfListL().from(core.Iterable.as(this[_parameters][$_get]("where")));
      function addCondition(field, operator, value) {
        let condition = [field, operator, value];
        if (!dart.test(conditions[$where](dart.fn(item => equality.equals(condition, item), T.ListLToboolL()))[$isEmpty])) dart.assertFailed("Condition " + dart.str(condition) + " already exists in this query.", I[1], 125, 11, "conditions\n              .where((List<dynamic> item) => equality.equals(condition, item))\n              .isEmpty");
        conditions[$add](condition);
      }
      dart.fn(addCondition, T.StringLAndStringLAnddynamicTovoid());
      if (isEqualTo != null) addCondition(field, "==", isEqualTo);
      if (isLessThan != null) addCondition(field, "<", isLessThan);
      if (isLessThanOrEqualTo != null) addCondition(field, "<=", isLessThanOrEqualTo);
      if (isGreaterThan != null) addCondition(field, ">", isGreaterThan);
      if (isGreaterThanOrEqualTo != null) addCondition(field, ">=", isGreaterThanOrEqualTo);
      if (arrayContains != null) addCondition(field, "array-contains", arrayContains);
      if (isNull != null) {
        if (!dart.test(isNull)) dart.assertFailed("isNull can only be set to true. " + "Use isEqualTo to filter on non-null values.", I[1], 143, 11, "isNull");
        addCondition(field, "==", null);
      }
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["where", conditions]));
    }
    orderBy(field, opts) {
      let descending = opts && 'descending' in opts ? opts.descending : false;
      let orders = T.ListOfListL().from(core.Iterable.as(this[_parameters][$_get]("orderBy")));
      let order = [field, descending];
      if (!dart.test(orders[$where](dart.fn(item => core.identical(field, item[$_get](0)), T.ListLToboolL()))[$isEmpty])) dart.assertFailed("OrderBy " + dart.str(field) + " already exists in this query", I[1], 159, 12, "orders.where((List<dynamic> item) => field == item[0]).isEmpty");
      orders[$add](order);
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["orderBy", orders]));
    }
    startAfterDocument(documentSnapshot) {
      if (!(documentSnapshot != null)) dart.assertFailed(null, I[1], 178, 12, "documentSnapshot != null");
      if (!!dart.test(this[_parameters][$containsKey]("startAfter"))) dart.assertFailed(null, I[1], 179, 12, "!_parameters.containsKey('startAfter')");
      if (!!dart.test(this[_parameters][$containsKey]("startAt"))) dart.assertFailed(null, I[1], 180, 12, "!_parameters.containsKey('startAt')");
      if (!!dart.test(this[_parameters][$containsKey]("startAfterDocument"))) dart.assertFailed(null, I[1], 181, 12, "!_parameters.containsKey('startAfterDocument')");
      if (!!dart.test(this[_parameters][$containsKey]("startAtDocument"))) dart.assertFailed(null, I[1], 182, 12, "!_parameters.containsKey('startAtDocument')");
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["startAfterDocument", new (T.IdentityMapOfStringL$dynamic()).from(["id", documentSnapshot.documentID, "data", documentSnapshot.data])]));
    }
    startAtDocument(documentSnapshot) {
      if (!(documentSnapshot != null)) dart.assertFailed(null, I[1], 204, 12, "documentSnapshot != null");
      if (!!dart.test(this[_parameters][$containsKey]("startAfter"))) dart.assertFailed(null, I[1], 205, 12, "!_parameters.containsKey('startAfter')");
      if (!!dart.test(this[_parameters][$containsKey]("startAt"))) dart.assertFailed(null, I[1], 206, 12, "!_parameters.containsKey('startAt')");
      if (!!dart.test(this[_parameters][$containsKey]("startAfterDocument"))) dart.assertFailed(null, I[1], 207, 12, "!_parameters.containsKey('startAfterDocument')");
      if (!!dart.test(this[_parameters][$containsKey]("startAtDocument"))) dart.assertFailed(null, I[1], 208, 12, "!_parameters.containsKey('startAtDocument')");
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["startAtDocument", new (T.IdentityMapOfStringL$dynamic()).from(["id", documentSnapshot.documentID, "data", documentSnapshot.data])]));
    }
    startAfter(values) {
      if (!(values != null)) dart.assertFailed(null, I[1], 225, 12, "values != null");
      if (!!dart.test(this[_parameters][$containsKey]("startAfter"))) dart.assertFailed(null, I[1], 226, 12, "!_parameters.containsKey('startAfter')");
      if (!!dart.test(this[_parameters][$containsKey]("startAt"))) dart.assertFailed(null, I[1], 227, 12, "!_parameters.containsKey('startAt')");
      if (!!dart.test(this[_parameters][$containsKey]("startAfterDocument"))) dart.assertFailed(null, I[1], 228, 12, "!_parameters.containsKey('startAfterDocument')");
      if (!!dart.test(this[_parameters][$containsKey]("startAtDocument"))) dart.assertFailed(null, I[1], 229, 12, "!_parameters.containsKey('startAtDocument')");
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["startAfter", values]));
    }
    startAt(values) {
      if (!(values != null)) dart.assertFailed(null, I[1], 241, 12, "values != null");
      if (!!dart.test(this[_parameters][$containsKey]("startAfter"))) dart.assertFailed(null, I[1], 242, 12, "!_parameters.containsKey('startAfter')");
      if (!!dart.test(this[_parameters][$containsKey]("startAt"))) dart.assertFailed(null, I[1], 243, 12, "!_parameters.containsKey('startAt')");
      if (!!dart.test(this[_parameters][$containsKey]("startAfterDocument"))) dart.assertFailed(null, I[1], 244, 12, "!_parameters.containsKey('startAfterDocument')");
      if (!!dart.test(this[_parameters][$containsKey]("startAtDocument"))) dart.assertFailed(null, I[1], 245, 12, "!_parameters.containsKey('startAtDocument')");
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["startAt", values]));
    }
    endAtDocument(documentSnapshot) {
      if (!(documentSnapshot != null)) dart.assertFailed(null, I[1], 262, 12, "documentSnapshot != null");
      if (!!dart.test(this[_parameters][$containsKey]("endBefore"))) dart.assertFailed(null, I[1], 263, 12, "!_parameters.containsKey('endBefore')");
      if (!!dart.test(this[_parameters][$containsKey]("endAt"))) dart.assertFailed(null, I[1], 264, 12, "!_parameters.containsKey('endAt')");
      if (!!dart.test(this[_parameters][$containsKey]("endBeforeDocument"))) dart.assertFailed(null, I[1], 265, 12, "!_parameters.containsKey('endBeforeDocument')");
      if (!!dart.test(this[_parameters][$containsKey]("endAtDocument"))) dart.assertFailed(null, I[1], 266, 12, "!_parameters.containsKey('endAtDocument')");
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["endAtDocument", new (T.IdentityMapOfStringL$dynamic()).from(["id", documentSnapshot.documentID, "data", documentSnapshot.data])]));
    }
    endAt(values) {
      if (!(values != null)) dart.assertFailed(null, I[1], 283, 12, "values != null");
      if (!!dart.test(this[_parameters][$containsKey]("endBefore"))) dart.assertFailed(null, I[1], 284, 12, "!_parameters.containsKey('endBefore')");
      if (!!dart.test(this[_parameters][$containsKey]("endAt"))) dart.assertFailed(null, I[1], 285, 12, "!_parameters.containsKey('endAt')");
      if (!!dart.test(this[_parameters][$containsKey]("endBeforeDocument"))) dart.assertFailed(null, I[1], 286, 12, "!_parameters.containsKey('endBeforeDocument')");
      if (!!dart.test(this[_parameters][$containsKey]("endAtDocument"))) dart.assertFailed(null, I[1], 287, 12, "!_parameters.containsKey('endAtDocument')");
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["endAt", values]));
    }
    endBeforeDocument(documentSnapshot) {
      if (!(documentSnapshot != null)) dart.assertFailed(null, I[1], 304, 12, "documentSnapshot != null");
      if (!!dart.test(this[_parameters][$containsKey]("endBefore"))) dart.assertFailed(null, I[1], 305, 12, "!_parameters.containsKey('endBefore')");
      if (!!dart.test(this[_parameters][$containsKey]("endAt"))) dart.assertFailed(null, I[1], 306, 12, "!_parameters.containsKey('endAt')");
      if (!!dart.test(this[_parameters][$containsKey]("endBeforeDocument"))) dart.assertFailed(null, I[1], 307, 12, "!_parameters.containsKey('endBeforeDocument')");
      if (!!dart.test(this[_parameters][$containsKey]("endAtDocument"))) dart.assertFailed(null, I[1], 308, 12, "!_parameters.containsKey('endAtDocument')");
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["endBeforeDocument", new (T.IdentityMapOfStringL$dynamic()).from(["id", documentSnapshot.documentID, "data", documentSnapshot.data])]));
    }
    endBefore(values) {
      if (!(values != null)) dart.assertFailed(null, I[1], 325, 12, "values != null");
      if (!!dart.test(this[_parameters][$containsKey]("endBefore"))) dart.assertFailed(null, I[1], 326, 12, "!_parameters.containsKey('endBefore')");
      if (!!dart.test(this[_parameters][$containsKey]("endAt"))) dart.assertFailed(null, I[1], 327, 12, "!_parameters.containsKey('endAt')");
      if (!!dart.test(this[_parameters][$containsKey]("endBeforeDocument"))) dart.assertFailed(null, I[1], 328, 12, "!_parameters.containsKey('endBeforeDocument')");
      if (!!dart.test(this[_parameters][$containsKey]("endAtDocument"))) dart.assertFailed(null, I[1], 329, 12, "!_parameters.containsKey('endAtDocument')");
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["endBefore", values]));
    }
    limit(length) {
      if (!!dart.test(this[_parameters][$containsKey]("limit"))) dart.assertFailed(null, I[1], 336, 12, "!_parameters.containsKey('limit')");
      return this[_copyWithParameters](new (T.IdentityMapOfStringL$dynamic()).from(["limit", length]));
    }
  };
  (cloud_firestore.Query.__ = function(opts) {
    let t0;
    let firestore = opts && 'firestore' in opts ? opts.firestore : null;
    let pathComponents = opts && 'pathComponents' in opts ? opts.pathComponents : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    this[firestore$] = firestore;
    this[_pathComponents] = pathComponents;
    this[_parameters] = (t0 = parameters, t0 == null ? T.MapOfStringL$dynamic().unmodifiable(new (T.IdentityMapOfStringL$dynamic()).from(["where", T.ListOfListL().unmodifiable(T.JSArrayOfListL().of([])), "orderBy", T.ListOfListL().unmodifiable(T.JSArrayOfListL().of([]))])) : t0);
    if (!(firestore != null)) dart.assertFailed(null, I[1], 19, 16, "firestore != null");
    if (!(pathComponents != null)) dart.assertFailed(null, I[1], 20, 16, "pathComponents != null");
    ;
  }).prototype = cloud_firestore.Query.prototype;
  dart.addTypeTests(cloud_firestore.Query);
  dart.addTypeCaches(cloud_firestore.Query);
  dart.setMethodSignature(cloud_firestore.Query, () => ({
    __proto__: dart.getMethods(cloud_firestore.Query.__proto__),
    [_copyWithParameters]: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    buildArguments: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    snapshots: dart.fnType(dart.legacy(async.Stream$(dart.legacy(cloud_firestore.QuerySnapshot))), []),
    getDocuments: dart.fnType(dart.legacy(async.Future$(dart.legacy(cloud_firestore.QuerySnapshot))), []),
    reference: dart.fnType(dart.legacy(cloud_firestore.CollectionReference), []),
    where: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.String)], {arrayContains: dart.dynamic, isEqualTo: dart.dynamic, isGreaterThan: dart.dynamic, isGreaterThanOrEqualTo: dart.dynamic, isLessThan: dart.dynamic, isLessThanOrEqualTo: dart.dynamic, isNull: dart.legacy(core.bool)}, {}),
    orderBy: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.String)], {descending: dart.legacy(core.bool)}, {}),
    startAfterDocument: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(cloud_firestore.DocumentSnapshot)]),
    startAtDocument: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(cloud_firestore.DocumentSnapshot)]),
    startAfter: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.List)]),
    startAt: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.List)]),
    endAtDocument: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(cloud_firestore.DocumentSnapshot)]),
    endAt: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.List)]),
    endBeforeDocument: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(cloud_firestore.DocumentSnapshot)]),
    endBefore: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.List)]),
    limit: dart.fnType(dart.legacy(cloud_firestore.Query), [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(cloud_firestore.Query, () => ({
    __proto__: dart.getGetters(cloud_firestore.Query.__proto__),
    [_path$]: dart.legacy(core.String)
  }));
  dart.setLibraryUri(cloud_firestore.Query, I[0]);
  dart.setFieldSignature(cloud_firestore.Query, () => ({
    __proto__: dart.getFields(cloud_firestore.Query.__proto__),
    firestore: dart.finalFieldType(dart.legacy(cloud_firestore.Firestore)),
    [_pathComponents]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    [_parameters]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))
  }));
  cloud_firestore.CollectionReference = class CollectionReference extends cloud_firestore.Query {
    get id() {
      return dart.test(this[_pathComponents][$isEmpty]) ? null : this[_pathComponents][$last];
    }
    parent() {
      let t0;
      if (dart.test(this[_pathComponents][$isEmpty])) {
        return null;
      }
      return new cloud_firestore.CollectionReference.__(this.firestore, (t0 = T.ListOfStringL().from(this[_pathComponents]), (() => {
        t0[$removeLast]();
        return t0;
      })()));
    }
    get path() {
      return this[_path$];
    }
    document(path = null) {
      let t0, t0$;
      let childPath = null;
      if (path == null) {
        let key = push_id_generator.PushIdGenerator.generatePushChildName();
        childPath = (t0 = T.ListOfStringL().from(this[_pathComponents]), (() => {
          t0[$add](key);
          return t0;
        })());
      } else {
        childPath = (t0$ = T.ListOfStringL().from(this[_pathComponents]), (() => {
          t0$[$addAll](path[$split]("/"));
          return t0$;
        })());
      }
      return new cloud_firestore.DocumentReference.__(this.firestore, childPath);
    }
    add(data) {
      return async.async(T.DocumentReferenceL(), (function* add() {
        let newDocument = this.document();
        yield newDocument.setData(data);
        return newDocument;
      }).bind(this));
    }
  };
  (cloud_firestore.CollectionReference.__ = function(firestore, pathComponents) {
    cloud_firestore.CollectionReference.__proto__.__.call(this, {firestore: firestore, pathComponents: pathComponents});
    ;
  }).prototype = cloud_firestore.CollectionReference.prototype;
  dart.addTypeTests(cloud_firestore.CollectionReference);
  dart.addTypeCaches(cloud_firestore.CollectionReference);
  dart.setMethodSignature(cloud_firestore.CollectionReference, () => ({
    __proto__: dart.getMethods(cloud_firestore.CollectionReference.__proto__),
    parent: dart.fnType(dart.legacy(cloud_firestore.CollectionReference), []),
    document: dart.fnType(dart.legacy(cloud_firestore.DocumentReference), [], [dart.legacy(core.String)]),
    add: dart.fnType(dart.legacy(async.Future$(dart.legacy(cloud_firestore.DocumentReference))), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))])
  }));
  dart.setGetterSignature(cloud_firestore.CollectionReference, () => ({
    __proto__: dart.getGetters(cloud_firestore.CollectionReference.__proto__),
    id: dart.legacy(core.String),
    path: dart.legacy(core.String)
  }));
  dart.setLibraryUri(cloud_firestore.CollectionReference, I[0]);
  var _name$ = dart.privateName(cloud_firestore, "_name");
  cloud_firestore.DocumentChangeType = class DocumentChangeType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (cloud_firestore.DocumentChangeType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = cloud_firestore.DocumentChangeType.prototype;
  dart.addTypeTests(cloud_firestore.DocumentChangeType);
  dart.addTypeCaches(cloud_firestore.DocumentChangeType);
  dart.setMethodSignature(cloud_firestore.DocumentChangeType, () => ({
    __proto__: dart.getMethods(cloud_firestore.DocumentChangeType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(cloud_firestore.DocumentChangeType, I[0]);
  dart.setFieldSignature(cloud_firestore.DocumentChangeType, () => ({
    __proto__: dart.getFields(cloud_firestore.DocumentChangeType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(cloud_firestore.DocumentChangeType, ['toString']);
  cloud_firestore.DocumentChangeType.added = C[3] || CT.C3;
  cloud_firestore.DocumentChangeType.modified = C[4] || CT.C4;
  cloud_firestore.DocumentChangeType.removed = C[5] || CT.C5;
  cloud_firestore.DocumentChangeType.values = C[6] || CT.C6;
  var type = dart.privateName(cloud_firestore, "DocumentChange.type");
  var oldIndex = dart.privateName(cloud_firestore, "DocumentChange.oldIndex");
  var newIndex = dart.privateName(cloud_firestore, "DocumentChange.newIndex");
  var document = dart.privateName(cloud_firestore, "DocumentChange.document");
  var _firestore$ = dart.privateName(cloud_firestore, "_firestore");
  cloud_firestore.DocumentChange = class DocumentChange extends core.Object {
    get type() {
      return this[type];
    }
    set type(value) {
      super.type = value;
    }
    get oldIndex() {
      return this[oldIndex];
    }
    set oldIndex(value) {
      super.oldIndex = value;
    }
    get newIndex() {
      return this[newIndex];
    }
    set newIndex(value) {
      super.newIndex = value;
    }
    get document() {
      return this[document];
    }
    set document(value) {
      super.document = value;
    }
  };
  (cloud_firestore.DocumentChange.__ = function(data, _firestore) {
    this[_firestore$] = _firestore;
    this[oldIndex] = T.intL().as(data[$_get]("oldIndex"));
    this[newIndex] = T.intL().as(data[$_get]("newIndex"));
    this[document] = new cloud_firestore.DocumentSnapshot.__(T.StringL().as(data[$_get]("path")), cloud_firestore._asStringKeyedMap(T.MapL().as(data[$_get]("document"))), new cloud_firestore.SnapshotMetadata.__(T.boolL().as(dart.dsend(data[$_get]("metadata"), '_get', ["hasPendingWrites"])), T.boolL().as(dart.dsend(data[$_get]("metadata"), '_get', ["isFromCache"]))), _firestore);
    this[type] = cloud_firestore.DocumentChangeType.values[$firstWhere](dart.fn(type => core.identical(dart.toString(type), data[$_get]("type")), T.DocumentChangeTypeLToboolL()));
    ;
  }).prototype = cloud_firestore.DocumentChange.prototype;
  dart.addTypeTests(cloud_firestore.DocumentChange);
  dart.addTypeCaches(cloud_firestore.DocumentChange);
  dart.setLibraryUri(cloud_firestore.DocumentChange, I[0]);
  dart.setFieldSignature(cloud_firestore.DocumentChange, () => ({
    __proto__: dart.getFields(cloud_firestore.DocumentChange.__proto__),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.Firestore)),
    type: dart.finalFieldType(dart.legacy(cloud_firestore.DocumentChangeType)),
    oldIndex: dart.finalFieldType(dart.legacy(core.int)),
    newIndex: dart.finalFieldType(dart.legacy(core.int)),
    document: dart.finalFieldType(dart.legacy(cloud_firestore.DocumentSnapshot))
  }));
  var firestore$0 = dart.privateName(cloud_firestore, "DocumentReference.firestore");
  cloud_firestore.DocumentReference = class DocumentReference extends core.Object {
    get firestore() {
      return this[firestore$0];
    }
    set firestore(value) {
      super.firestore = value;
    }
    _equals(o) {
      if (o == null) return false;
      return T.DocumentReferenceL().is(o) && dart.equals(o.firestore, this.firestore) && o.path == this.path;
    }
    get hashCode() {
      return ui.hashList(this[_pathComponents]);
    }
    get path() {
      return this[_pathComponents][$join]("/");
    }
    get documentID() {
      return this[_pathComponents][$last];
    }
    setData(data, opts) {
      let merge = opts && 'merge' in opts ? opts.merge : false;
      return cloud_firestore.Firestore.channel.invokeMethod(dart.void, "DocumentReference#setData", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.firestore.app.name, "path", this.path, "data", data, "options", new (T.IdentityMapOfStringL$boolL()).from(["merge", merge])]));
    }
    updateData(data) {
      return cloud_firestore.Firestore.channel.invokeMethod(dart.void, "DocumentReference#updateData", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.firestore.app.name, "path", this.path, "data", data]));
    }
    get() {
      return async.async(T.DocumentSnapshotL(), (function* get() {
        let data = (yield cloud_firestore.Firestore.channel.invokeMapMethod(T.StringL(), dart.dynamic, "DocumentReference#get", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.firestore.app.name, "path", this.path])));
        return new cloud_firestore.DocumentSnapshot.__(T.StringL().as(data[$_get]("path")), cloud_firestore._asStringKeyedMap(T.MapL().as(data[$_get]("data"))), new cloud_firestore.SnapshotMetadata.__(T.boolL().as(dart.dsend(data[$_get]("metadata"), '_get', ["hasPendingWrites"])), T.boolL().as(dart.dsend(data[$_get]("metadata"), '_get', ["isFromCache"]))), this.firestore);
      }).bind(this));
    }
    delete() {
      return cloud_firestore.Firestore.channel.invokeMethod(dart.void, "DocumentReference#delete", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.firestore.app.name, "path", this.path]));
    }
    collection(collectionPath) {
      return this.firestore.collection(T.JSArrayOfStringL().of([this.path, collectionPath])[$join]("/"));
    }
    snapshots() {
      let _handle = null;
      let controller = null;
      controller = T.StreamControllerOfDocumentSnapshotL().broadcast({onListen: dart.fn(() => {
          _handle = cloud_firestore.Firestore.channel.invokeMethod(T.intL(), "Query#addDocumentListener", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.firestore.app.name, "path", this.path])).then(T.intL(), dart.fn(result => T.FutureOrLOfintL().as(result), T.dynamicToFutureOrLOfintL()));
          _handle.then(core.Null, dart.fn(handle => {
            cloud_firestore.Firestore._documentObservers[$_set](handle, controller);
          }, T.intLToNull()));
        }, T.VoidToNull()), onCancel: dart.fn(() => {
          _handle.then(core.Null, dart.fn(handle => async.async(core.Null, function*() {
            yield cloud_firestore.Firestore.channel.invokeMethod(dart.void, "Query#removeListener", new (T.IdentityMapOfStringL$dynamic()).from(["handle", handle]));
            cloud_firestore.Firestore._documentObservers[$remove](handle);
          }), T.intLToFutureLOfNull()));
        }, T.VoidToNull())});
      return controller.stream;
    }
  };
  (cloud_firestore.DocumentReference.__ = function(firestore, pathComponents) {
    this[firestore$0] = firestore;
    this[_pathComponents] = pathComponents;
    if (!(firestore != null)) dart.assertFailed(null, I[2], 16, 16, "firestore != null");
    ;
  }).prototype = cloud_firestore.DocumentReference.prototype;
  dart.addTypeTests(cloud_firestore.DocumentReference);
  dart.addTypeCaches(cloud_firestore.DocumentReference);
  dart.setMethodSignature(cloud_firestore.DocumentReference, () => ({
    __proto__: dart.getMethods(cloud_firestore.DocumentReference.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    setData: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {merge: dart.legacy(core.bool)}, {}),
    updateData: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    get: dart.fnType(dart.legacy(async.Future$(dart.legacy(cloud_firestore.DocumentSnapshot))), []),
    delete: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    collection: dart.fnType(dart.legacy(cloud_firestore.CollectionReference), [dart.legacy(core.String)]),
    snapshots: dart.fnType(dart.legacy(async.Stream$(dart.legacy(cloud_firestore.DocumentSnapshot))), [])
  }));
  dart.setGetterSignature(cloud_firestore.DocumentReference, () => ({
    __proto__: dart.getGetters(cloud_firestore.DocumentReference.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int),
    path: dart.legacy(core.String),
    documentID: dart.legacy(core.String)
  }));
  dart.setLibraryUri(cloud_firestore.DocumentReference, I[0]);
  dart.setFieldSignature(cloud_firestore.DocumentReference, () => ({
    __proto__: dart.getFields(cloud_firestore.DocumentReference.__proto__),
    firestore: dart.finalFieldType(dart.legacy(cloud_firestore.Firestore)),
    [_pathComponents]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  dart.defineExtensionMethods(cloud_firestore.DocumentReference, ['_equals']);
  dart.defineExtensionAccessors(cloud_firestore.DocumentReference, ['hashCode']);
  var data$ = dart.privateName(cloud_firestore, "DocumentSnapshot.data");
  var metadata$ = dart.privateName(cloud_firestore, "DocumentSnapshot.metadata");
  cloud_firestore.DocumentSnapshot = class DocumentSnapshot extends core.Object {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get metadata() {
      return this[metadata$];
    }
    set metadata(value) {
      super.metadata = value;
    }
    get reference() {
      return this[_firestore$].document(this[_path$]);
    }
    _get(key) {
      return this.data[$_get](key);
    }
    get documentID() {
      return this[_path$][$split]("/")[$last];
    }
    get exists() {
      return this.data != null;
    }
  };
  (cloud_firestore.DocumentSnapshot.__ = function(_path, data, metadata, _firestore) {
    this[_path$] = _path;
    this[data$] = data;
    this[metadata$] = metadata;
    this[_firestore$] = _firestore;
    ;
  }).prototype = cloud_firestore.DocumentSnapshot.prototype;
  dart.addTypeTests(cloud_firestore.DocumentSnapshot);
  dart.addTypeCaches(cloud_firestore.DocumentSnapshot);
  dart.setMethodSignature(cloud_firestore.DocumentSnapshot, () => ({
    __proto__: dart.getMethods(cloud_firestore.DocumentSnapshot.__proto__),
    _get: dart.fnType(dart.dynamic, [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(cloud_firestore.DocumentSnapshot, () => ({
    __proto__: dart.getGetters(cloud_firestore.DocumentSnapshot.__proto__),
    reference: dart.legacy(cloud_firestore.DocumentReference),
    documentID: dart.legacy(core.String),
    exists: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(cloud_firestore.DocumentSnapshot, I[0]);
  dart.setFieldSignature(cloud_firestore.DocumentSnapshot, () => ({
    __proto__: dart.getFields(cloud_firestore.DocumentSnapshot.__proto__),
    [_path$]: dart.finalFieldType(dart.legacy(core.String)),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.Firestore)),
    data: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    metadata: dart.finalFieldType(dart.legacy(cloud_firestore.SnapshotMetadata))
  }));
  cloud_firestore.FieldValueType = class FieldValueType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (cloud_firestore.FieldValueType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = cloud_firestore.FieldValueType.prototype;
  dart.addTypeTests(cloud_firestore.FieldValueType);
  dart.addTypeCaches(cloud_firestore.FieldValueType);
  dart.setMethodSignature(cloud_firestore.FieldValueType, () => ({
    __proto__: dart.getMethods(cloud_firestore.FieldValueType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(cloud_firestore.FieldValueType, I[0]);
  dart.setFieldSignature(cloud_firestore.FieldValueType, () => ({
    __proto__: dart.getFields(cloud_firestore.FieldValueType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(cloud_firestore.FieldValueType, ['toString']);
  cloud_firestore.FieldValueType.arrayUnion = C[7] || CT.C7;
  cloud_firestore.FieldValueType.arrayRemove = C[8] || CT.C8;
  cloud_firestore.FieldValueType.delete = C[9] || CT.C9;
  cloud_firestore.FieldValueType.serverTimestamp = C[10] || CT.C10;
  cloud_firestore.FieldValueType.incrementDouble = C[11] || CT.C11;
  cloud_firestore.FieldValueType.incrementInteger = C[12] || CT.C12;
  cloud_firestore.FieldValueType.values = C[13] || CT.C13;
  var type$ = dart.privateName(cloud_firestore, "FieldValue.type");
  var value$ = dart.privateName(cloud_firestore, "FieldValue.value");
  cloud_firestore.FieldValue = class FieldValue extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static arrayUnion(elements) {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValueType.arrayUnion, elements);
    }
    static arrayRemove(elements) {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValueType.arrayRemove, elements);
    }
    static delete() {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValueType.delete, null);
    }
    static serverTimestamp() {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValueType.serverTimestamp, null);
    }
    static increment(value) {
      if (!(T.intL().is(value) || T.doubleL().is(value))) dart.assertFailed(null, I[3], 60, 12, "value is int || value is double");
      if (T.doubleL().is(value)) {
        return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValueType.incrementDouble, value);
      } else if (T.intL().is(value)) {
        return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValueType.incrementInteger, value);
      }
      return null;
    }
  };
  (cloud_firestore.FieldValue.__ = function(type, value) {
    this[type$] = type;
    this[value$] = value;
    ;
  }).prototype = cloud_firestore.FieldValue.prototype;
  dart.addTypeTests(cloud_firestore.FieldValue);
  dart.addTypeCaches(cloud_firestore.FieldValue);
  dart.setLibraryUri(cloud_firestore.FieldValue, I[0]);
  dart.setFieldSignature(cloud_firestore.FieldValue, () => ({
    __proto__: dart.getFields(cloud_firestore.FieldValue.__proto__),
    type: dart.finalFieldType(dart.legacy(cloud_firestore.FieldValueType)),
    value: dart.finalFieldType(dart.dynamic)
  }));
  var app$ = dart.privateName(cloud_firestore, "Firestore.app");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  cloud_firestore.Firestore = class Firestore extends core.Object {
    get app() {
      return this[app$];
    }
    set app(value) {
      super.app = value;
    }
    _equals(o) {
      if (o == null) return false;
      return T.FirestoreL().is(o) && dart.equals(o.app, this.app);
    }
    get hashCode() {
      return dart.hashCode(this.app);
    }
    collection(path) {
      if (!(path != null)) dart.assertFailed(null, I[4], 70, 12, "path != null");
      return new cloud_firestore.CollectionReference.__(this, path[$split]("/"));
    }
    document(path) {
      if (!(path != null)) dart.assertFailed(null, I[4], 76, 12, "path != null");
      return new cloud_firestore.DocumentReference.__(this, path[$split]("/"));
    }
    batch() {
      return new cloud_firestore.WriteBatch.__(this);
    }
    runTransaction(transactionHandler, opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[14] || CT.C14;
      return async.async(T.MapLOfStringL$dynamic(), (function* runTransaction() {
        let t0, t0$, t0$0;
        if (!(dart.notNull(timeout.inMilliseconds) > 0)) dart.assertFailed("Transaction timeout must be more than 0 milliseconds", I[4], 111, 12, "timeout.inMilliseconds > 0");
        let transactionId = (t0 = cloud_firestore.Firestore._transactionHandlerId, cloud_firestore.Firestore._transactionHandlerId = dart.notNull(t0) + 1, t0);
        cloud_firestore.Firestore._transactionHandlers[$_set](transactionId, transactionHandler);
        let result = (yield cloud_firestore.Firestore.channel.invokeMethod(T.MapL(), "Firestore#runTransaction", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.app.name, "transactionId", transactionId, "transactionTimeout", timeout.inMilliseconds])));
        t0$0 = (t0$ = result, t0$ == null ? null : t0$[$cast](T.StringL(), dart.dynamic));
        return t0$0 == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t0$0;
      }).bind(this));
    }
    enablePersistence(enable) {
      return async.async(dart.void, (function* enablePersistence() {
        if (!(enable != null)) dart.assertFailed(null, I[4], 127, 12, "enable != null");
        yield cloud_firestore.Firestore.channel.invokeMethod(dart.void, "Firestore#enablePersistence", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.app.name, "enable", enable]));
      }).bind(this));
    }
    settings(opts) {
      let persistenceEnabled = opts && 'persistenceEnabled' in opts ? opts.persistenceEnabled : null;
      let host = opts && 'host' in opts ? opts.host : null;
      let sslEnabled = opts && 'sslEnabled' in opts ? opts.sslEnabled : null;
      let timestampsInSnapshotsEnabled = opts && 'timestampsInSnapshotsEnabled' in opts ? opts.timestampsInSnapshotsEnabled : null;
      return async.async(dart.void, (function* settings() {
        yield cloud_firestore.Firestore.channel.invokeMethod(dart.void, "Firestore#settings", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.app.name, "persistenceEnabled", persistenceEnabled, "host", host, "sslEnabled", sslEnabled, "timestampsInSnapshotsEnabled", timestampsInSnapshotsEnabled]));
      }).bind(this));
    }
  };
  (cloud_firestore.Firestore.new = function(opts) {
    let t0;
    let app = opts && 'app' in opts ? opts.app : null;
    this[app$] = (t0 = app, t0 == null ? firebase_app.FirebaseApp.instance : t0);
    if (dart.test(cloud_firestore.Firestore._initialized)) return;
    cloud_firestore.Firestore.channel.setMethodCallHandler(dart.fn(call => async.async(dart.dynamic, (function*() {
      if (call.method === "QuerySnapshot") {
        let snapshot = new cloud_firestore.QuerySnapshot.__(T.MapL().as(call.arguments), this);
        cloud_firestore.Firestore._queryObservers[$_get](dart.dsend(call.arguments, '_get', ["handle"])).add(snapshot);
      } else if (call.method === "DocumentSnapshot") {
        let snapshot = new cloud_firestore.DocumentSnapshot.__(T.StringL().as(dart.dsend(call.arguments, '_get', ["path"])), cloud_firestore._asStringKeyedMap(T.MapL().as(dart.dsend(call.arguments, '_get', ["data"]))), new cloud_firestore.SnapshotMetadata.__(T.boolL().as(dart.dsend(dart.dsend(call.arguments, '_get', ["metadata"]), '_get', ["hasPendingWrites"])), T.boolL().as(dart.dsend(dart.dsend(call.arguments, '_get', ["metadata"]), '_get', ["isFromCache"]))), this);
        cloud_firestore.Firestore._documentObservers[$_get](dart.dsend(call.arguments, '_get', ["handle"])).add(snapshot);
      } else if (call.method === "DoTransaction") {
        let transactionId = T.intL().as(dart.dsend(call.arguments, '_get', ["transactionId"]));
        return cloud_firestore.Firestore._transactionHandlers[$_get](transactionId)(new cloud_firestore.Transaction.new(transactionId, this));
      }
    }).bind(this)), T.MethodCallLToFutureL()));
    cloud_firestore.Firestore._initialized = true;
  }).prototype = cloud_firestore.Firestore.prototype;
  dart.addTypeTests(cloud_firestore.Firestore);
  dart.addTypeCaches(cloud_firestore.Firestore);
  dart.setMethodSignature(cloud_firestore.Firestore, () => ({
    __proto__: dart.getMethods(cloud_firestore.Firestore.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    collection: dart.fnType(dart.legacy(cloud_firestore.CollectionReference), [dart.legacy(core.String)]),
    document: dart.fnType(dart.legacy(cloud_firestore.DocumentReference), [dart.legacy(core.String)]),
    batch: dart.fnType(dart.legacy(cloud_firestore.WriteBatch), []),
    runTransaction: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(dart.fnType(dart.legacy(async.Future), [dart.legacy(cloud_firestore.Transaction)]))], {timeout: dart.legacy(core.Duration)}, {}),
    enablePersistence: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.bool)]),
    settings: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {host: dart.legacy(core.String), persistenceEnabled: dart.legacy(core.bool), sslEnabled: dart.legacy(core.bool), timestampsInSnapshotsEnabled: dart.legacy(core.bool)}, {})
  }));
  dart.setGetterSignature(cloud_firestore.Firestore, () => ({
    __proto__: dart.getGetters(cloud_firestore.Firestore.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(cloud_firestore.Firestore, I[0]);
  dart.setFieldSignature(cloud_firestore.Firestore, () => ({
    __proto__: dart.getFields(cloud_firestore.Firestore.__proto__),
    app: dart.finalFieldType(dart.legacy(firebase_app.FirebaseApp))
  }));
  dart.defineExtensionMethods(cloud_firestore.Firestore, ['_equals']);
  dart.defineExtensionAccessors(cloud_firestore.Firestore, ['hashCode']);
  dart.defineLazy(cloud_firestore.Firestore, {
    /*cloud_firestore.Firestore.instance*/get instance() {
      return new cloud_firestore.Firestore.new();
    },
    /*cloud_firestore.Firestore._initialized*/get _initialized() {
      return false;
    },
    set _initialized(_) {},
    /*cloud_firestore.Firestore.channel*/get channel() {
      return C[15] || CT.C15;
    },
    /*cloud_firestore.Firestore._queryObservers*/get _queryObservers() {
      return new (T.IdentityMapOfintL$StreamControllerLOfQuerySnapshotL()).new();
    },
    /*cloud_firestore.Firestore._documentObservers*/get _documentObservers() {
      return new (T.IdentityMapOfintL$StreamControllerLOfDocumentSnapshotL()).new();
    },
    /*cloud_firestore.Firestore._transactionHandlers*/get _transactionHandlers() {
      return new (T.IdentityMapOfintL$TransactionLToLFutureL()).new();
    },
    /*cloud_firestore.Firestore._transactionHandlerId*/get _transactionHandlerId() {
      return 0;
    },
    set _transactionHandlerId(_) {}
  }, true);
  cloud_firestore.FirestoreMessageCodec = class FirestoreMessageCodec extends message_codecs.StandardMessageCodec {
    writeValue(buffer, value) {
      if (T.DateTimeL().is(value)) {
        buffer.putUint8(128);
        buffer.putInt64(value.millisecondsSinceEpoch);
      } else if (T.TimestampL().is(value)) {
        buffer.putUint8(136);
        buffer.putInt64(value.seconds);
        buffer.putInt32(value.nanoseconds);
      } else if (T.GeoPointL().is(value)) {
        buffer.putUint8(129);
        buffer.putFloat64(value.latitude);
        buffer.putFloat64(value.longitude);
      } else if (T.DocumentReferenceL().is(value)) {
        buffer.putUint8(130);
        let appName = convert.utf8.encoder.convert(value.firestore.app.name);
        this.writeSize(buffer, appName[$length]);
        buffer.putUint8List(T.Uint8ListL().as(appName));
        let bytes = convert.utf8.encoder.convert(value.path);
        this.writeSize(buffer, bytes[$length]);
        buffer.putUint8List(T.Uint8ListL().as(bytes));
      } else if (T.BlobL().is(value)) {
        buffer.putUint8(131);
        this.writeSize(buffer, value.bytes[$length]);
        buffer.putUint8List(value.bytes);
      } else if (T.FieldValueL().is(value)) {
        let code = cloud_firestore.FirestoreMessageCodec._kFieldValueCodes[$_get](value.type);
        if (!(code != null)) dart.assertFailed(null, I[5], 60, 14, "code != null");
        buffer.putUint8(code);
        if (value.value != null) this.writeValue(buffer, value.value);
      } else {
        super.writeValue(buffer, value);
      }
    }
    readValueOfType(type, buffer) {
      switch (type) {
        case 128:
        {
          return new core.DateTime.fromMillisecondsSinceEpoch(buffer.getInt64());
        }
        case 136:
        {
          return new cloud_firestore.Timestamp.new(buffer.getInt64(), buffer.getInt32());
        }
        case 129:
        {
          return new cloud_firestore.GeoPoint.new(buffer.getFloat64(), buffer.getFloat64());
        }
        case 130:
        {
          let appNameLength = this.readSize(buffer);
          let appName = convert.utf8.decoder.convert(buffer.getUint8List(appNameLength));
          let app = new firebase_app.FirebaseApp.new({name: appName});
          let firestore = new cloud_firestore.Firestore.new({app: app});
          let pathLength = this.readSize(buffer);
          let path = convert.utf8.decoder.convert(buffer.getUint8List(pathLength));
          return firestore.document(path);
        }
        case 131:
        {
          let length = this.readSize(buffer);
          let bytes = buffer.getUint8List(length);
          return new cloud_firestore.Blob.new(T.Uint8ListL().as(bytes));
        }
        case 132:
        {
          let value = T.ListL().as(this.readValue(buffer));
          return cloud_firestore.FieldValue.arrayUnion(value);
        }
        case 133:
        {
          let value = T.ListL().as(this.readValue(buffer));
          return cloud_firestore.FieldValue.arrayRemove(value);
        }
        case 134:
        {
          return cloud_firestore.FieldValue.delete();
        }
        case 135:
        {
          return cloud_firestore.FieldValue.serverTimestamp();
        }
        case 137:
        {
          let value = T.doubleL().as(this.readValue(buffer));
          return cloud_firestore.FieldValue.increment(value);
        }
        case 138:
        {
          let value = T.intL().as(this.readValue(buffer));
          return cloud_firestore.FieldValue.increment(value);
        }
        default:
        {
          return super.readValueOfType(type, buffer);
        }
      }
    }
  };
  (cloud_firestore.FirestoreMessageCodec.new = function() {
    cloud_firestore.FirestoreMessageCodec.__proto__.new.call(this);
    ;
  }).prototype = cloud_firestore.FirestoreMessageCodec.prototype;
  dart.addTypeTests(cloud_firestore.FirestoreMessageCodec);
  dart.addTypeCaches(cloud_firestore.FirestoreMessageCodec);
  dart.setMethodSignature(cloud_firestore.FirestoreMessageCodec, () => ({
    __proto__: dart.getMethods(cloud_firestore.FirestoreMessageCodec.__proto__),
    writeValue: dart.fnType(dart.void, [dart.legacy(serialization.WriteBuffer), dart.dynamic]),
    readValueOfType: dart.fnType(dart.dynamic, [dart.legacy(core.int), dart.legacy(serialization.ReadBuffer)])
  }));
  dart.setLibraryUri(cloud_firestore.FirestoreMessageCodec, I[0]);
  dart.defineLazy(cloud_firestore.FirestoreMessageCodec, {
    /*cloud_firestore.FirestoreMessageCodec._kDateTime*/get _kDateTime() {
      return 128;
    },
    /*cloud_firestore.FirestoreMessageCodec._kGeoPoint*/get _kGeoPoint() {
      return 129;
    },
    /*cloud_firestore.FirestoreMessageCodec._kDocumentReference*/get _kDocumentReference() {
      return 130;
    },
    /*cloud_firestore.FirestoreMessageCodec._kBlob*/get _kBlob() {
      return 131;
    },
    /*cloud_firestore.FirestoreMessageCodec._kArrayUnion*/get _kArrayUnion() {
      return 132;
    },
    /*cloud_firestore.FirestoreMessageCodec._kArrayRemove*/get _kArrayRemove() {
      return 133;
    },
    /*cloud_firestore.FirestoreMessageCodec._kDelete*/get _kDelete() {
      return 134;
    },
    /*cloud_firestore.FirestoreMessageCodec._kServerTimestamp*/get _kServerTimestamp() {
      return 135;
    },
    /*cloud_firestore.FirestoreMessageCodec._kTimestamp*/get _kTimestamp() {
      return 136;
    },
    /*cloud_firestore.FirestoreMessageCodec._kIncrementDouble*/get _kIncrementDouble() {
      return 137;
    },
    /*cloud_firestore.FirestoreMessageCodec._kIncrementInteger*/get _kIncrementInteger() {
      return 138;
    },
    /*cloud_firestore.FirestoreMessageCodec._kFieldValueCodes*/get _kFieldValueCodes() {
      return C[18] || CT.C18;
    }
  }, true);
  var latitude$ = dart.privateName(cloud_firestore, "GeoPoint.latitude");
  var longitude$ = dart.privateName(cloud_firestore, "GeoPoint.longitude");
  cloud_firestore.GeoPoint = class GeoPoint extends core.Object {
    get latitude() {
      return this[latitude$];
    }
    set latitude(value) {
      super.latitude = value;
    }
    get longitude() {
      return this[longitude$];
    }
    set longitude(value) {
      super.longitude = value;
    }
    _equals(o) {
      if (o == null) return false;
      return T.GeoPointL().is(o) && o.latitude == this.latitude && o.longitude == this.longitude;
    }
    get hashCode() {
      return ui.hashValues(this.latitude, this.longitude);
    }
  };
  (cloud_firestore.GeoPoint.new = function(latitude, longitude) {
    this[latitude$] = latitude;
    this[longitude$] = longitude;
    ;
  }).prototype = cloud_firestore.GeoPoint.prototype;
  dart.addTypeTests(cloud_firestore.GeoPoint);
  dart.addTypeCaches(cloud_firestore.GeoPoint);
  dart.setMethodSignature(cloud_firestore.GeoPoint, () => ({
    __proto__: dart.getMethods(cloud_firestore.GeoPoint.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(cloud_firestore.GeoPoint, () => ({
    __proto__: dart.getGetters(cloud_firestore.GeoPoint.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(cloud_firestore.GeoPoint, I[0]);
  dart.setFieldSignature(cloud_firestore.GeoPoint, () => ({
    __proto__: dart.getFields(cloud_firestore.GeoPoint.__proto__),
    latitude: dart.finalFieldType(dart.legacy(core.double)),
    longitude: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(cloud_firestore.GeoPoint, ['_equals']);
  dart.defineExtensionAccessors(cloud_firestore.GeoPoint, ['hashCode']);
  var documents = dart.privateName(cloud_firestore, "QuerySnapshot.documents");
  var documentChanges = dart.privateName(cloud_firestore, "QuerySnapshot.documentChanges");
  cloud_firestore.QuerySnapshot = class QuerySnapshot extends core.Object {
    get documents() {
      return this[documents];
    }
    set documents(value) {
      super.documents = value;
    }
    get documentChanges() {
      return this[documentChanges];
    }
    set documentChanges(value) {
      super.documentChanges = value;
    }
  };
  (cloud_firestore.QuerySnapshot.__ = function(data, _firestore) {
    this[_firestore$] = _firestore;
    this[documents] = T.ListOfDocumentSnapshotL().generate(core.int.as(dart.dload(data[$_get]("documents"), 'length')), dart.fn(index => new cloud_firestore.DocumentSnapshot.__(T.StringL().as(dart.dsend(data[$_get]("paths"), '_get', [index])), cloud_firestore._asStringKeyedMap(T.MapL().as(dart.dsend(data[$_get]("documents"), '_get', [index]))), new cloud_firestore.SnapshotMetadata.__(T.boolL().as(dart.dsend(dart.dsend(data[$_get]("metadatas"), '_get', [index]), '_get', ["hasPendingWrites"])), T.boolL().as(dart.dsend(dart.dsend(data[$_get]("metadatas"), '_get', [index]), '_get', ["isFromCache"]))), _firestore), T.intLToDocumentSnapshotL()));
    this[documentChanges] = T.ListOfDocumentChangeL().generate(core.int.as(dart.dload(data[$_get]("documentChanges"), 'length')), dart.fn(index => new cloud_firestore.DocumentChange.__(T.MapL().as(dart.dsend(data[$_get]("documentChanges"), '_get', [index])), _firestore), T.intLToDocumentChangeL()));
    ;
  }).prototype = cloud_firestore.QuerySnapshot.prototype;
  dart.addTypeTests(cloud_firestore.QuerySnapshot);
  dart.addTypeCaches(cloud_firestore.QuerySnapshot);
  dart.setLibraryUri(cloud_firestore.QuerySnapshot, I[0]);
  dart.setFieldSignature(cloud_firestore.QuerySnapshot, () => ({
    __proto__: dart.getFields(cloud_firestore.QuerySnapshot.__proto__),
    documents: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(cloud_firestore.DocumentSnapshot)))),
    documentChanges: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(cloud_firestore.DocumentChange)))),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.Firestore))
  }));
  var hasPendingWrites$ = dart.privateName(cloud_firestore, "SnapshotMetadata.hasPendingWrites");
  var isFromCache$ = dart.privateName(cloud_firestore, "SnapshotMetadata.isFromCache");
  cloud_firestore.SnapshotMetadata = class SnapshotMetadata extends core.Object {
    get hasPendingWrites() {
      return this[hasPendingWrites$];
    }
    set hasPendingWrites(value) {
      super.hasPendingWrites = value;
    }
    get isFromCache() {
      return this[isFromCache$];
    }
    set isFromCache(value) {
      super.isFromCache = value;
    }
  };
  (cloud_firestore.SnapshotMetadata.__ = function(hasPendingWrites, isFromCache) {
    this[hasPendingWrites$] = hasPendingWrites;
    this[isFromCache$] = isFromCache;
    ;
  }).prototype = cloud_firestore.SnapshotMetadata.prototype;
  dart.addTypeTests(cloud_firestore.SnapshotMetadata);
  dart.addTypeCaches(cloud_firestore.SnapshotMetadata);
  dart.setLibraryUri(cloud_firestore.SnapshotMetadata, I[0]);
  dart.setFieldSignature(cloud_firestore.SnapshotMetadata, () => ({
    __proto__: dart.getFields(cloud_firestore.SnapshotMetadata.__proto__),
    hasPendingWrites: dart.finalFieldType(dart.legacy(core.bool)),
    isFromCache: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var _seconds$ = dart.privateName(cloud_firestore, "_seconds");
  var _nanoseconds$ = dart.privateName(cloud_firestore, "_nanoseconds");
  cloud_firestore.Timestamp = class Timestamp extends core.Object {
    static fromMillisecondsSinceEpoch(milliseconds) {
      let seconds = (dart.notNull(milliseconds) / 1000)[$floor]();
      let nanoseconds = (dart.notNull(milliseconds) - seconds * 1000) * 1000000;
      return new cloud_firestore.Timestamp.new(seconds, nanoseconds);
    }
    static fromMicrosecondsSinceEpoch(microseconds) {
      let seconds = (dart.notNull(microseconds) / 1000000)[$floor]();
      let nanoseconds = (dart.notNull(microseconds) - seconds * 1000000) * 1000;
      return new cloud_firestore.Timestamp.new(seconds, nanoseconds);
    }
    static fromDate(date) {
      return cloud_firestore.Timestamp.fromMicrosecondsSinceEpoch(date.microsecondsSinceEpoch);
    }
    static now() {
      return cloud_firestore.Timestamp.fromMicrosecondsSinceEpoch(new core.DateTime.now().microsecondsSinceEpoch);
    }
    get seconds() {
      return this[_seconds$];
    }
    get nanoseconds() {
      return this[_nanoseconds$];
    }
    get millisecondsSinceEpoch() {
      return (dart.notNull(this.seconds) * 1000 + dart.notNull(this.nanoseconds) / 1000000)[$floor]();
    }
    get microsecondsSinceEpoch() {
      return (dart.notNull(this.seconds) * 1000000 + dart.notNull(this.nanoseconds) / 1000)[$floor]();
    }
    toDate() {
      return new core.DateTime.fromMicrosecondsSinceEpoch(this.microsecondsSinceEpoch);
    }
    get hashCode() {
      return ui.hashValues(this.seconds, this.nanoseconds);
    }
    _equals(o) {
      if (o == null) return false;
      return T.TimestampL().is(o) && o.seconds == this.seconds && o.nanoseconds == this.nanoseconds;
    }
    compareTo(other) {
      T.TimestampL().as(other);
      if (this.seconds == other.seconds) {
        return this.nanoseconds[$compareTo](other.nanoseconds);
      }
      return this.seconds[$compareTo](other.seconds);
    }
    toString() {
      return "Timestamp(seconds=" + dart.str(this.seconds) + ", nanoseconds=" + dart.str(this.nanoseconds) + ")";
    }
    static _validateRange(seconds, nanoseconds) {
      cloud_firestore._check(dart.notNull(nanoseconds) >= 0, "nanoseconds", nanoseconds);
      cloud_firestore._check(dart.notNull(nanoseconds) < 1000000000, "nanoseconds", nanoseconds);
      cloud_firestore._check(dart.notNull(seconds) >= -62135596800.0, "seconds", seconds);
      cloud_firestore._check(dart.notNull(seconds) < 253402300800.0, "seconds", seconds);
    }
  };
  (cloud_firestore.Timestamp.new = function(_seconds, _nanoseconds) {
    this[_seconds$] = _seconds;
    this[_nanoseconds$] = _nanoseconds;
    cloud_firestore.Timestamp._validateRange(this[_seconds$], this[_nanoseconds$]);
  }).prototype = cloud_firestore.Timestamp.prototype;
  dart.addTypeTests(cloud_firestore.Timestamp);
  dart.addTypeCaches(cloud_firestore.Timestamp);
  cloud_firestore.Timestamp[dart.implements] = () => [core.Comparable$(dart.legacy(cloud_firestore.Timestamp))];
  dart.setMethodSignature(cloud_firestore.Timestamp, () => ({
    __proto__: dart.getMethods(cloud_firestore.Timestamp.__proto__),
    toDate: dart.fnType(dart.legacy(core.DateTime), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    compareTo: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    [$compareTo]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(cloud_firestore.Timestamp, () => ({
    __proto__: dart.getGetters(cloud_firestore.Timestamp.__proto__),
    seconds: dart.legacy(core.int),
    nanoseconds: dart.legacy(core.int),
    millisecondsSinceEpoch: dart.legacy(core.int),
    microsecondsSinceEpoch: dart.legacy(core.int),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(cloud_firestore.Timestamp, I[0]);
  dart.setFieldSignature(cloud_firestore.Timestamp, () => ({
    __proto__: dart.getFields(cloud_firestore.Timestamp.__proto__),
    [_seconds$]: dart.finalFieldType(dart.legacy(core.int)),
    [_nanoseconds$]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(cloud_firestore.Timestamp, ['_equals', 'compareTo', 'toString']);
  dart.defineExtensionAccessors(cloud_firestore.Timestamp, ['hashCode']);
  dart.defineLazy(cloud_firestore.Timestamp, {
    /*cloud_firestore.Timestamp._kStartOfTime*/get _kStartOfTime() {
      return -62135596800.0;
    },
    /*cloud_firestore.Timestamp._kEndOfTime*/get _kEndOfTime() {
      return 253402300800.0;
    }
  }, true);
  var _transactionId$ = dart.privateName(cloud_firestore, "_transactionId");
  cloud_firestore.Transaction = class Transaction extends core.Object {
    get(documentReference) {
      return async.async(T.DocumentSnapshotL(), (function* get() {
        let t0;
        let result = (yield cloud_firestore.Firestore.channel.invokeMethod(T.MapL(), "Transaction#get", new (T.IdentityMapOfStringL$dynamic()).from(["app", this[_firestore$].app.name, "transactionId", this[_transactionId$], "path", documentReference.path])));
        if (result != null) {
          return new cloud_firestore.DocumentSnapshot.__(documentReference.path, T.MapLOfStringL$dynamic().as((t0 = result[$_get]("data"), t0 == null ? null : dart.dgsend(t0, [T.StringL(), dart.dynamic], 'cast', []))), new cloud_firestore.SnapshotMetadata.__(T.boolL().as(dart.dsend(result[$_get]("metadata"), '_get', ["hasPendingWrites"])), T.boolL().as(dart.dsend(result[$_get]("metadata"), '_get', ["isFromCache"]))), this[_firestore$]);
        } else {
          return null;
        }
      }).bind(this));
    }
    delete(documentReference) {
      return async.async(dart.void, (function* $delete() {
        return cloud_firestore.Firestore.channel.invokeMethod(dart.void, "Transaction#delete", new (T.IdentityMapOfStringL$dynamic()).from(["app", this[_firestore$].app.name, "transactionId", this[_transactionId$], "path", documentReference.path]));
      }).bind(this));
    }
    update(documentReference, data) {
      return async.async(dart.void, (function* update() {
        return cloud_firestore.Firestore.channel.invokeMethod(dart.void, "Transaction#update", new (T.IdentityMapOfStringL$dynamic()).from(["app", this[_firestore$].app.name, "transactionId", this[_transactionId$], "path", documentReference.path, "data", data]));
      }).bind(this));
    }
    set(documentReference, data) {
      return async.async(dart.void, (function* set() {
        return cloud_firestore.Firestore.channel.invokeMethod(dart.void, "Transaction#set", new (T.IdentityMapOfStringL$dynamic()).from(["app", this[_firestore$].app.name, "transactionId", this[_transactionId$], "path", documentReference.path, "data", data]));
      }).bind(this));
    }
  };
  (cloud_firestore.Transaction.new = function(_transactionId, _firestore) {
    this[_transactionId$] = _transactionId;
    this[_firestore$] = _firestore;
    ;
  }).prototype = cloud_firestore.Transaction.prototype;
  dart.addTypeTests(cloud_firestore.Transaction);
  dart.addTypeCaches(cloud_firestore.Transaction);
  dart.setMethodSignature(cloud_firestore.Transaction, () => ({
    __proto__: dart.getMethods(cloud_firestore.Transaction.__proto__),
    get: dart.fnType(dart.legacy(async.Future$(dart.legacy(cloud_firestore.DocumentSnapshot))), [dart.legacy(cloud_firestore.DocumentReference)]),
    delete: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(cloud_firestore.DocumentReference)]),
    update: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(cloud_firestore.DocumentReference), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    set: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(cloud_firestore.DocumentReference), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))])
  }));
  dart.setLibraryUri(cloud_firestore.Transaction, I[0]);
  dart.setFieldSignature(cloud_firestore.Transaction, () => ({
    __proto__: dart.getFields(cloud_firestore.Transaction.__proto__),
    [_transactionId$]: dart.fieldType(dart.legacy(core.int)),
    [_firestore$]: dart.fieldType(dart.legacy(cloud_firestore.Firestore))
  }));
  var _actions = dart.privateName(cloud_firestore, "_actions");
  var _committed = dart.privateName(cloud_firestore, "_committed");
  var _handle = dart.privateName(cloud_firestore, "_handle");
  cloud_firestore.WriteBatch = class WriteBatch extends core.Object {
    commit() {
      return async.async(dart.void, (function* commit() {
        if (!dart.test(this[_committed])) {
          this[_committed] = true;
          yield async.Future.wait(dart.dynamic, this[_actions]);
          yield cloud_firestore.Firestore.channel.invokeMethod(dart.void, "WriteBatch#commit", new (T.IdentityMapOfStringL$dynamic()).from(["handle", (yield this[_handle])]));
        } else {
          dart.throw(new core.StateError.new("This batch has already been committed."));
        }
      }).bind(this));
    }
    delete(document) {
      if (!dart.test(this[_committed])) {
        this[_handle].then(core.Null, dart.fn(handle => {
          this[_actions][$add](cloud_firestore.Firestore.channel.invokeMethod(dart.void, "WriteBatch#delete", new (T.IdentityMapOfStringL$dynamic()).from(["app", this[_firestore$].app.name, "handle", handle, "path", document.path])));
        }, T.dynamicToNull()));
      } else {
        dart.throw(new core.StateError.new("This batch has been committed and can no longer be changed."));
      }
    }
    setData(document, data, opts) {
      let merge = opts && 'merge' in opts ? opts.merge : false;
      if (!dart.test(this[_committed])) {
        this[_handle].then(core.Null, dart.fn(handle => {
          this[_actions][$add](cloud_firestore.Firestore.channel.invokeMethod(dart.void, "WriteBatch#setData", new (T.IdentityMapOfStringL$dynamic()).from(["app", this[_firestore$].app.name, "handle", handle, "path", document.path, "data", data, "options", new (T.IdentityMapOfStringL$boolL()).from(["merge", merge])])));
        }, T.dynamicToNull()));
      } else {
        dart.throw(new core.StateError.new("This batch has been committed and can no longer be changed."));
      }
    }
    updateData(document, data) {
      if (!dart.test(this[_committed])) {
        this[_handle].then(core.Null, dart.fn(handle => {
          this[_actions][$add](cloud_firestore.Firestore.channel.invokeMethod(dart.void, "WriteBatch#updateData", new (T.IdentityMapOfStringL$dynamic()).from(["app", this[_firestore$].app.name, "handle", handle, "path", document.path, "data", data])));
        }, T.dynamicToNull()));
      } else {
        dart.throw(new core.StateError.new("This batch has been committed and can no longer be changed."));
      }
    }
  };
  (cloud_firestore.WriteBatch.__ = function(_firestore) {
    this[_actions] = T.JSArrayOfFutureL().of([]);
    this[_committed] = false;
    this[_firestore$] = _firestore;
    this[_handle] = cloud_firestore.Firestore.channel.invokeMethod(dart.dynamic, "WriteBatch#create", new (T.IdentityMapOfStringL$dynamic()).from(["app", _firestore.app.name]));
    ;
  }).prototype = cloud_firestore.WriteBatch.prototype;
  dart.addTypeTests(cloud_firestore.WriteBatch);
  dart.addTypeCaches(cloud_firestore.WriteBatch);
  dart.setMethodSignature(cloud_firestore.WriteBatch, () => ({
    __proto__: dart.getMethods(cloud_firestore.WriteBatch.__proto__),
    commit: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    delete: dart.fnType(dart.void, [dart.legacy(cloud_firestore.DocumentReference)]),
    setData: dart.fnType(dart.void, [dart.legacy(cloud_firestore.DocumentReference), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {merge: dart.legacy(core.bool)}, {}),
    updateData: dart.fnType(dart.void, [dart.legacy(cloud_firestore.DocumentReference), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))])
  }));
  dart.setLibraryUri(cloud_firestore.WriteBatch, I[0]);
  dart.setFieldSignature(cloud_firestore.WriteBatch, () => ({
    __proto__: dart.getFields(cloud_firestore.WriteBatch.__proto__),
    [_firestore$]: dart.finalFieldType(dart.legacy(cloud_firestore.Firestore)),
    [_handle]: dart.fieldType(dart.legacy(async.Future)),
    [_actions]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(async.Future)))),
    [_committed]: dart.fieldType(dart.legacy(core.bool))
  }));
  cloud_firestore._asStringKeyedMap = function _asStringKeyedMap(map) {
    if (map == null) return null;
    if (T.MapLOfStringL$dynamic().is(map)) {
      return map;
    } else {
      return T.LinkedHashMapOfStringL$dynamic().from(map);
    }
  };
  cloud_firestore._check = function _check(expr, name, value) {
    if (!dart.test(expr)) {
      dart.throw(new core.ArgumentError.new("Timestamp " + dart.str(name) + " out of range: " + dart.str(value)));
    }
  };
  dart.defineLazy(cloud_firestore, {
    /*cloud_firestore._kThousand*/get _kThousand() {
      return 1000;
    },
    /*cloud_firestore._kMillion*/get _kMillion() {
      return 1000000;
    },
    /*cloud_firestore._kBillion*/get _kBillion() {
      return 1000000000;
    }
  }, true);
  dart.trackLibraries("packages/cloud_firestore/cloud_firestore.dart", {
    "package:cloud_firestore/cloud_firestore.dart": cloud_firestore
  }, {
    "package:cloud_firestore/cloud_firestore.dart": ["src/blob.dart", "src/collection_reference.dart", "src/document_change.dart", "src/document_reference.dart", "src/document_snapshot.dart", "src/field_value.dart", "src/firestore.dart", "src/firestore_message_codec.dart", "src/geo_point.dart", "src/query.dart", "src/query_snapshot.dart", "src/snapshot_metadata.dart", "src/timestamp.dart", "src/transaction.dart", "src/write_batch.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src/blob.dart","src/query.dart","src/collection_reference.dart","src/document_change.dart","src/document_reference.dart","src/document_snapshot.dart","src/field_value.dart","src/firestore.dart","src/firestore_message_codec.dart","src/geo_point.dart","src/query_snapshot.dart","src/snapshot_metadata.dart","src/timestamp.dart","src/transaction.dart","src/write_batch.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/cloud_firestore/cloud_firestore.dart.lib.js"}');
  // Exports:
  return {
    cloud_firestore: cloud_firestore
  };
}));

//# sourceMappingURL=cloud_firestore.dart.lib.js.map
